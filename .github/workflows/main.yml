# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the main branch
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2

      # Runs a single command using the runners shell
      - name: Run a one-line script
        run: echo Hello, world!

      # Runs a set of commands using the runners shell
      - name: Run a multi-line script
        run: |
          echo Add other actions to build,
          echo test, and deploy your project.
          


      - name: Maven Release and Publish
        # You may pin to the exact commit or the version.
        # uses: mg-smartrent/github-actions-maven-release@5f387c0d77b22da293e9812d43ab90cdc49f475a
        uses: mg-smartrent/github-actions-maven-release@v1.5
        with:
          # Filter the branch to execute the release on
          release-branch-name: main # optional
          # Enable gpg signing
          #gpg-enabled: # optional
          # The GPG key ID
          #gpg-key-id: # optional
          # The GPG key
          #gpg-key: # optional
          # The maven local repository path
         # maven-local-repo-path: # optional, default is $M2_HOME/repository
          # Maven server repository id to push the artefacts to
         # maven-repo-server-id: 
          # Maven server repository username
         # maven-repo-server-username: 
          # Maven server repository password
         # maven-repo-server-password: 
          # The git user name for commiting the release
          git-release-bot-name: ReleaseBot
          # The git user email for commiting the release
          # git-release-bot-email: 
          # Github access token. https://help.github.com/en/github/authenticating-to-github/creating-a-personal-access-token-for-the-command-line
          #access-token: 
          # Inject arguments in mvn docker build and push.
          #maven-release-args: # optional, default is 
          # Publish the released artifact to GitHub Packages
          #maven-release-publish: # optional
          # Publish the new post release snapshot artifact to GitHub Packages
          #maven-snapshot-publish: # optional
          # Inject arguments in mvn publish command, ex: -Dskip.unit.tests=true - to skip the tests
          #maven-publish-args: # optional
          # Build and Push docker image of the released version.
          #maven-release-push-docker: # optional
          # Build and Push docker image of the new post release snapshot version.
          #maven-snapshot-push-docker: # optional
          # Inject arguments in mvn docker build and push.
          #maven-docker-args: # optional, default is 
          # Docker registry username
          #maven-docker-user: # optional, default is 
          # Docker registry password our auth token
          #maven-docker-password: # optional, default is 
          # Docker file repository uri, ex: "docker.io/myuser/logs-aggregator-service"
         #maven-docker-file-repository: # optional, default is 

